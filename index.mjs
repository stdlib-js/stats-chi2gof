// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import{isPrimitive as t}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-collection@v0.1.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-ndarray-like@v0.1.0-esm/index.mjs";import{isPrimitive as i}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import{isPrimitive as n}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-string@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-utils-absolute-difference@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-sqrt-eps@v0.1.1-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-pinf@v0.1.1-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-chisquare-cdf@v0.1.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nan@v0.1.1-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-daxpy@v0.1.1-esm/index.mjs";import h from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-base-dscal@v0.1.1-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-ext-base-dsumpw@v0.1.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/array-float64@v0.1.1-esm/index.mjs";import v,{isPrimitive as c}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer@v0.1.0-esm/index.mjs";import{isPrimitive as j}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.1.1-esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.1.0-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.1.1-esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-bernoulli-pmf@v0.1.1-esm/index.mjs";import w from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-binomial-pmf@v0.1.0-esm/index.mjs";import x from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-discrete-uniform-pmf@v0.1.0-esm/index.mjs";import E from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-geometric-pmf@v0.1.0-esm/index.mjs";import V from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-hypergeometric-pmf@v0.1.0-esm/index.mjs";import _ from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-negative-binomial-pmf@v0.1.0-esm/index.mjs";import T from"https://cdn.jsdelivr.net/gh/stdlib-js/stats-base-dists-poisson-pmf@v0.1.0-esm/index.mjs";import O from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-incrspace@v0.1.0-esm/index.mjs";import F from"https://cdn.jsdelivr.net/gh/stdlib-js/random-sample@v0.1.0-esm/index.mjs";import P from"https://cdn.jsdelivr.net/gh/stdlib-js/blas-ext-base-dfill@v0.1.1-esm/index.mjs";import q from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-special-roundn@v0.1.0-esm/index.mjs";import S from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import k from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";var z=.05,I=0,R=!1,M=500;function N(){return{alpha:z,ddof:I,simulate:R,iterations:M}}function A(e,s){if(!b(s))return new TypeError(m("invalid argument. Options argument must be an object. Value: `%s`.",s));if(g(s,"alpha")){if(e.alpha=s.alpha,!i(e.alpha)||l(e.alpha))return new TypeError(m("invalid option. `%s` option must be a number. Option: `%s`.","alpha",e.alpha));if(e.alpha<0||e.alpha>1)return new RangeError(m("invalid option. `%s` option must be a number on the interval: [0, 1]. Value: `%s`.","alpha",e.alpha))}return g(s,"ddof")&&(e.ddof=s.ddof,!t(e.ddof))?new TypeError(m("invalid option. `%s` option must be a nonnegative integer. Option: `%s`.","ddof",e.ddof)):g(s,"iterations")&&(e.iterations=s.iterations,!c(e.iterations))?new TypeError(m("invalid option. `%s` option must be a positive integer. Option: `%s`.","iterations",e.iterations)):g(s,"simulate")&&(e.simulate=s.simulate,!j(e.simulate))?new TypeError(m("invalid option. `%s` option must be a boolean. Option: `%s`.","simulate",e.simulate)):null}var C={bernoulli:y,binomial:w,"discrete-uniform":x,geometric:E,hypergeometric:V,"negative-binomial":_,poisson:T};function D(t){return g(C,t)?C[t]:new Error(m("invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.",t))}function J(t,e,s,i,n){var r,o,d,m,l;for(r=0,l=0;l<t;l++){if(o=e[l*s],0===(d=i[l*n])){if(0===o)continue;return a}r+=(m=o-d)*m/d}return r}function U(t,e,s,i,n){var r;for(r=0;r<t;r++)i[e[r*s]*n]+=1;return i}function B(t,e,s,i,n,r){var o,a,d,m,l;for(o=O(0,t,1),a={size:n,probs:s},d=new f(t),m=1,l=0;l<r;l++)J(t,d=U(t,F(o,a),1,d,1),1,e,1)>=i&&(m+=1),l<r-1&&P(t,0,d,1);return m/(r+1)}function G(t,e,s,i){return this instanceof G?(this._pValue=t,this._alpha=e,this._statistic=s,this._df=i,this):new G(t,e,s,i)}function H(v,c){var j,b,g,y,w,x,E,V,_,T,O,F,P,q,S,k,z,I,R;if(s(v)&&1===v.ndims&&1===v.strides.length)P=v.data,q=v.strides[0],S=v.offset;else{if(!e(v))throw new TypeError(m("invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.",v));P=v,q=1,S=0}for(F=v.length,E=new f(F+1),k=0,R=0;R<F;R++){if(I=P[S+q*R],!t(I))throw new TypeError(m("invalid argument. First argument must contain nonnegative integers. Index: `%u`. Value: `%s`.",R,I));E[R]=I,k+=I}if(0===k)throw new Error("invalid argument. First argument must contain at least one element greater than zero (i.e., the total number number of observations must be greater than zero).");if(b=0,n(c)){if((_=D(c))instanceof Error)throw _;for(b+=_.length-1,g=[0],R=0;R<b;R++){if(!i(I=arguments[R+2])||l(I))throw new TypeError(m("invalid argument. Probability mass function (PMF) arguments must be numbers. Argument: `%u`. Value: `%s`.",R+2,I));g.push(I)}for(j=new f(F+1),T=0,R=0;R<F;R++)g[0]=R,"discrete-uniform"===c&&(g[0]+=g[1]),T+=I=_.apply(null,g),j[R]=I*k;T<1&&(j[F]=(1-T)*k,F+=1)}else{if(s(c)&&1===c.ndims&&1===c.strides.length)P=c.data,q=c.strides[0],S=c.offset;else{if(!e(c))throw new TypeError(m("invalid argument. Second argument must be either an array-like object (or one-dimensional ndarray) of probabilities summing to one, an array-like object (or one-dimensional ndarray) of expected frequencies, or a discrete probability distribution name. Value: `%s`.",c));P=c,q=1,S=0}if(c.length!==F)throw new RangeError("invalid arguments. First and second arguments must have the same length.");for(j=new f(F),T=0,R=0;R<F;R++){if(I=P[S+q*R],!i(I))throw new TypeError(m("invalid argument. Second argument must only contain numbers. Index: `%u`. Value: `%s`.",R,I));if(I<0)throw new TypeError(m("invalid argument. Second argument must only contain nonnegative numbers. Index: `%u`. Value: `%d`.",R,I));T+=I>1?a:I,j[R]=I}r(T,1)<=o&&(z=c,j=h(F,k,j,1))}if(y=N(),arguments.length>2+b&&(V=A(y,arguments[2+b])))throw V;return x=J(F,E,1,j,1),y.simulate?(void 0===z&&(I=u(F,j,1),z=p(F,1/I,j,1,new f(F),1)),w=B(F,j,z,x,k,y.iterations)):(O=F-1-y.ddof,w=1-d(x,O)),new G(w,y.alpha,x,void 0===O?null:O)}k(G.prototype,"alpha",(function(){return this._alpha})),k(G.prototype,"df",(function(){return this._df})),S(G.prototype,"method","Chi-square goodness-of-fit test"),k(G.prototype,"pValue",(function(){return this._pValue})),k(G.prototype,"rejected",(function(){return this._pValue<=this._alpha})),k(G.prototype,"statistic",(function(){return this._statistic})),S(G.prototype,"toString",(function(t){var e,s,i;if(s=4,e=!0,arguments.length>0){if(!b(t))throw new TypeError(m("invalid argument. Must provide an object. Value: `%s`.",t));if(g(t,"digits")){if(!v(t.digits))throw new TypeError(m("invalid option. `%s` option must be a positive integer. Option: `%s`.","digits",t.digits));s=t.digits}if(g(t,"decision")){if(!j(t.decision))throw new TypeError(m("invalid option. `%s` option must be a boolean. Option: `%s`.","decision",t.decision));e=t.decision}}return i=[this.method,"","","Null hypothesis: population probabilities are equal to those in p","","","    pValue: "+q(this._pValue,-s),"    statistic: "+q(this._statistic,-s),"    degrees of freedom: "+this._df,""],e&&(i.push("Test Decision: "+(this.rejected?"Reject":"Fail to reject")+" null in favor of alternative at "+100*this._alpha+"% significance level"),i.push("")),i.join("\n")})),S(G.prototype,"toJSON",(function(){return{rejected:this.rejected,alpha:this._alpha,pValue:this._pValue,df:this._df,statistic:this._statistic,method:this.method}}));export{H as default};
//# sourceMappingURL=index.mjs.map
