{"version":3,"file":"index.mjs","sources":["../lib/defaults.js","../lib/validate.js","../lib/pmf.js","../lib/get_pmf.js","../lib/statistic.js","../lib/tabulate.js","../lib/simulate.js","../lib/results.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport DEFAULTS from './defaults.json' ;\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': DEFAULTS.alpha,\n\t\t'ddof': DEFAULTS.ddof,\n\t\t'simulate': DEFAULTS.simulate,\n\t\t'iterations': DEFAULTS.iterations\n\t};\n}\n\n\n// EXPORTS //\n\nexport default defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {NonNegativeInteger} [options.ddof] - degrees of freedom adjustment\n* @param {boolean} [options.simulate] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations] - number of Monte Carlo iterations\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'simulate': false,\n*     'ddof': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0dO2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0dO8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ddof' ) ) {\n\t\topts.ddof = options.ddof;\n\t\tif ( !isNonNegativeInteger( opts.ddof ) ) {\n\t\t\treturn new TypeError( format( '0dO35', 'ddof', opts.ddof ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iterations' ) ) {\n\t\topts.iterations = options.iterations;\n\t\tif ( !isPositiveInteger( opts.iterations ) ) {\n\t\t\treturn new TypeError( format( '0dO3b', 'iterations', opts.iterations ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'simulate' ) ) {\n\t\topts.simulate = options.simulate;\n\t\tif ( !isBoolean( opts.simulate ) ) {\n\t\t\treturn new TypeError( format( '0dO30', 'simulate', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport bernoulli from '@stdlib/stats-base-dists-bernoulli-pmf' ;\nimport binomial from '@stdlib/stats-base-dists-binomial-pmf' ;\nimport discreteUniform from '@stdlib/stats-base-dists-discrete-uniform-pmf' ;\nimport geometric from '@stdlib/stats-base-dists-geometric-pmf' ;\nimport hypergeometric from '@stdlib/stats-base-dists-hypergeometric-pmf' ;\nimport negativeBinomial from '@stdlib/stats-base-dists-negative-binomial-pmf' ;\nimport poisson from '@stdlib/stats-base-dists-poisson-pmf' ;\n\n\n// MAIN //\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\nvar PMF = {\n\t'bernoulli': bernoulli,\n\t'binomial': binomial,\n\t'discrete-uniform': discreteUniform,\n\t'geometric': geometric,\n\t'hypergeometric': hypergeometric,\n\t'negative-binomial': negativeBinomial,\n\t'poisson': poisson\n};\n\n\n// EXPORTS //\n\nexport default PMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport PMF from './pmf.js' ;\n\n\n// MAIN //\n\n/**\n* Returns the probability mass function (PMF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @returns {(Function|Error)} a probability mass function (PMF) or an error\n*/\nfunction getPMF( name ) {\n\tif ( !hasOwnProp( PMF, name ) ) {\n\t\treturn new Error( format( '0dO9v', name ) );\n\t}\n\treturn PMF[ name ];\n}\n\n\n// EXPORTS //\n\nexport default getPMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport PINF from '@stdlib/constants-float64-pinf' ;\n\n\n// MAIN //\n\n/**\n* Computes a chi-square test statistic.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - observation frequencies\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - expected frequencies\n* @param {integer} strideY - `y` stride length\n* @returns {number} test statistic\n*/\nfunction testStatistic( N, x, strideX, y, strideY ) {\n\tvar stat;\n\tvar v1;\n\tvar v2;\n\tvar d;\n\tvar i;\n\n\tstat = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv1 = x[ i*strideX ];\n\t\tv2 = y[ i*strideY ];\n\t\tif ( v2 === 0.0 ) {\n\t\t\tif ( v1 === 0.0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t\td = v1 - v2;\n\t\tstat += ( d * d ) / v2;\n\t}\n\treturn stat;\n}\n\n\n// EXPORTS //\n\nexport default testStatistic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a frequency table from an input array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var arr = [ 0, 1, 1, 0, 0, 2, 3, 5 ];\n* var out = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var freq = tabulate( arr.length, arr, 1, out, 1 );\n* // returns [ 3, 2, 1, 1, 0, 1, 0, 0 ]\n*/\nfunction tabulate( N, x, strideX, y, strideY ) {\n\tvar i;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ x[ i*strideX ] * strideY ] += 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nexport default tabulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport incrspace from '@stdlib/array-base-incrspace' ;\nimport sample from '@stdlib/random-sample' ;\nimport Float64Array from '@stdlib/array-float64' ;\nimport dfill from '@stdlib/blas-ext-base-dfill' ;\nimport tabulate from './tabulate.js' ;\nimport testStatistic from './statistic.js' ;\n\n\n// MAIN //\n\n/**\n* Performs a Monte-Carlo simulation.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} expected - expected number of observations\n* @param {NumericArray} p - probabilities\n* @param {number} stat - test statistic\n* @param {NonNegativeInteger} nobs - total number of observations\n* @param {NonNegativeInteger} niter - number of iterations\n* @returns {number} p-value\n*/\nfunction simulate( N, expected, p, stat, nobs, niter ) {\n\tvar pool;\n\tvar opts;\n\tvar freq;\n\tvar cnt;\n\tvar v;\n\tvar i;\n\n\tpool = incrspace( 0, N, 1 ); // TODO: replace with strided interface\n\topts = {\n\t\t'size': nobs,\n\t\t'probs': p\n\t};\n\tfreq = new Float64Array( N );\n\tcnt = 1;\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tv = sample( pool, opts ); // TODO: use `sample.factory` method once sample pkg is updated\n\t\tfreq = tabulate( N, v, 1, freq, 1 );\n\t\tif ( testStatistic( N, freq, 1, expected, 1 ) >= stat ) { // TODO: consider replacing with low-level double-precision strided interface\n\t\t\tcnt += 1;\n\t\t}\n\t\tif ( i < niter-1 ) {\n\t\t\tdfill( N, 0.0, freq, 1 );\n\t\t}\n\t}\n\treturn cnt / ( niter+1 );\n}\n\n\n// EXPORTS //\n\nexport default simulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nimport isPositiveInteger from '@stdlib/assert-is-positive-integer' ;\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport roundn from '@stdlib/math-base-special-roundn' ;\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {(number|null)} df - degrees of freedom\n* @returns {Results} results object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var alpha = res.alpha;\n* // returns 0.05\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {(number|null)}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var df = res.df;\n* // returns 4\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var method = res.method;\n* // returns 'Chi-square goodness-of-fit test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square goodness-of-fit test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var pval = res.pValue;\n* // returns 0.0406\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var stat = res.statistic;\n* // returns 9.9901\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square goodness-of-fit test\n*\n*     Null hypothesis: population probabilities are equal to those in p\n*\n*        pValue: 0.0406\n*        statistic: 9.9901\n*        degrees of freedom: 4\n*\n*     Test Decision: Reject null in favor of alternative at 5% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0dO4K', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0dO3b', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0dO30', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: population probabilities are equal to those in p',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var o = res.toJSON();\n* // returns {'rejected': true, 'alpha': 0.05, 'pValue': 0.0406, 'df': 4, ...}\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nexport default Results;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport isCollection from '@stdlib/assert-is-collection' ;\nimport isndarrayLike from '@stdlib/assert-is-ndarray-like' ;\nimport { isPrimitive as isNumber } from '@stdlib/assert-is-number' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport absdiff from '@stdlib/math-base-utils-absolute-difference' ;\nimport FLOAT64_SQRT_EPS from '@stdlib/constants-float64-sqrt-eps' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport chisqCDF from '@stdlib/stats-base-dists-chisquare-cdf' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport isnan from '@stdlib/assert-is-nan' ;\nimport daxpy from '@stdlib/blas-base-daxpy' ;\nimport dscal from '@stdlib/blas-base-dscal' ;\nimport dsumpw from '@stdlib/blas-ext-base-dsumpw' ;\nimport Float64Array from '@stdlib/array-float64' ;\nimport defaults from './defaults.js' ;\nimport validate from './validate.js' ;\nimport getPMF from './get_pmf.js' ;\nimport testStatistic from './statistic.js' ;\nimport simulate from './simulate.js' ;\nimport Results from './results.js' ;\n\n\n// MAIN //\n\n/**\n* Performs a chi-square goodness-of-fit test.\n*\n* @param {(Collection|VectorLike)} x - observation frequencies\n* @param {(Collection|VectorLike|string)} y - expected frequencies or a discrete probability distribution name\n* @param {...number} [args] - probability mass function (PMF) arguments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment\n* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations\n* @throws {TypeError} first argument must be an array-like object or a 1-dimensional array containing nonnegative integers\n* @throws {TypeError} second argument must be either an array-like object (or a 1-dimensional array) of nonnegative numbers, an array-like object (or a 1-dimensional array) of probabilities summing to one, or a discrete probability distribution name\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} first and second arguments must have the same length\n* @throws {Error} first argument must contain at least one element greater than zero\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @throws {TypeError} probability mass function (PMF) arguments must be numbers\n* @returns {Object} test results\n*\n* @example\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\nfunction chi2gof( x, y ) {\n\tvar expected;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar obs;\n\tvar err;\n\tvar pmf;\n\tvar sum;\n\tvar df;\n\tvar N;\n\tvar d;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar p;\n\tvar v;\n\tvar i;\n\n\tif ( isndarrayLike( x ) && x.ndims === 1 && x.strides.length === 1 ) { // is ndarray-like vector?\n\t\td = x.data;\n\t\ts = x.strides[ 0 ];\n\t\to = x.offset;\n\t} else if ( isCollection( x ) ) {\n\t\td = x;\n\t\ts = 1;\n\t\to = 0;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tN = x.length;\n\n\t// Initialize an array for storing a copy of the observations array:\n\tobs = new Float64Array( N+1 ); // Note: `N+1` is intentional in the event that we need to add a remaining category for all values greater than or equal to `N`\n\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = d[ o+(s*i) ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t}\n\t\tobs[ i ] = v;\n\t\tn += v;\n\t}\n\tif ( n === 0 ) {\n\t\tthrow new Error( format( '0dO1G' ) );\n\t}\n\t// NOTE: `obs` is now a single-segment contiguous Float64Array\n\n\tnargs = 0;\n\tif ( isString( y ) ) {\n\t\tpmf = getPMF( y );\n\t\tif ( pmf instanceof Error ) {\n\t\t\tthrow pmf;\n\t\t}\n\t\tnargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity\n\t\targs = [ 0 ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i+2 ];\n\t\t\tif ( !isNumber( v ) || isnan( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Probability mass function (PMF) arguments must be numbers. Argument: `%u`. Value: `%s`.', i+2, v ) );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\texpected = new Float64Array( N+1 );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\targs[ 0 ] = i;\n\t\t\tif ( y === 'discrete-uniform' ) {\n\t\t\t\targs[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)\n\t\t\t}\n\t\t\tv = pmf.apply( null, args );\n\t\t\tsum += v;\n\t\t\texpected[ i ] = v * n;\n\t\t}\n\t\t// Check whether we need to add a remaining category for all values greater than or equal to `N`...\n\t\tif ( sum < 1.0 ) {\n\t\t\texpected[ N ] = (1.0-sum) * n;\n\t\t\tN += 1;\n\t\t}\n\t} else {\n\t\tif ( isndarrayLike( y ) && y.ndims === 1 && y.strides.length === 1 ) { // is ndarray-like vector?\n\t\t\td = y.data;\n\t\t\ts = y.strides[ 0 ];\n\t\t\to = y.offset;\n\t\t} else if ( isCollection( y ) ) {\n\t\t\td = y;\n\t\t\ts = 1;\n\t\t\to = 0;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object (or one-dimensional ndarray) of probabilities summing to one, an array-like object (or one-dimensional ndarray) of expected frequencies, or a discrete probability distribution name. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( y.length !== N ) {\n\t\t\tthrow new RangeError( format( '0dO1H' ) );\n\t\t}\n\t\texpected = new Float64Array( N );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = d[ o+(s*i) ];\n\t\t\tif ( !isNumber( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain numbers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t\t}\n\t\t\tif ( v < 0.0 ) {\n\t\t\t\tthrow new TypeError( format( '0dOA0', i, v ) );\n\t\t\t} else if ( v > 1.0 ) {\n\t\t\t\tsum += PINF;\n\t\t\t} else {\n\t\t\t\tsum += v;\n\t\t\t}\n\t\t\texpected[ i ] = v;\n\t\t}\n\t\t// Check if provided a unity probability array (otherwise, assume provided an expected frequencies array)...\n\t\tif ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS ) {\n\t\t\tp = y; // NOTE: `y` may not be a Float64Array\n\t\t\texpected = dscal( N, n, expected, 1 );\n\t\t}\n\t}\n\t// NOTE: `expected` is now a single-segment contiguous Float64Array\n\n\topts = defaults();\n\tif ( arguments.length > 2+nargs ) {\n\t\terr = validate( opts, arguments[ 2+nargs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstat = testStatistic( N, obs, 1, expected, 1 ); // TODO: consider replacing with low-level double-precision strided interface\n\tif ( opts.simulate ) {\n\t\tif ( p === void 0 ) {\n\t\t\tv = dsumpw( N, expected, 1 );\n\t\t\tp = daxpy( N, 1.0/v, expected, 1, new Float64Array( N ), 1 );\n\t\t}\n\t\tpval = simulate( N, expected, p, stat, n, opts.iterations );\n\t} else {\n\t\tdf = N - 1 - opts.ddof;\n\t\tpval = 1.0 - chisqCDF( stat, df );\n\t}\n\treturn new Results( pval, opts.alpha, stat, ( df === void 0 ) ? null : df );\n}\n\n\n// EXPORTS //\n\nexport default chi2gof;\n"],"names":["defaults","alpha","DEFAULTS","ddof","simulate","iterations","validate","opts","options","isObject","TypeError","format","hasOwnProp","isNumber","isnan","RangeError","isNonNegativeInteger","isPositiveInteger","isBoolean","PMF","bernoulli","binomial","discreteUniform","geometric","hypergeometric","negativeBinomial","poisson","getPMF","name","Error","testStatistic","N","x","strideX","y","strideY","stat","v1","v2","d","i","PINF","tabulate","expected","p","nobs","niter","pool","freq","cnt","incrspace","size","probs","Float64Array","sample","dfill","Results","pValue","statistic","df","this","_pValue","_alpha","_statistic","_df","chi2gof","nargs","args","pval","obs","err","pmf","sum","s","o","n","v","isndarrayLike","ndims","strides","length","data","offset","isCollection","isString","arguments","push","apply","absdiff","FLOAT64_SQRT_EPS","dscal","dsumpw","daxpy","chisqCDF","setReadOnlyAccessor","prototype","setReadOnly","decision","dgts","out","digits","method","roundn","join","rejected"],"mappings":"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"}