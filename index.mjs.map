{"version":3,"file":"index.mjs","sources":["../lib/defaults.js","../lib/validate.js","../lib/get_pmf.js","../lib/pmf.js","../lib/statistic.js","../lib/tabulate.js","../lib/simulate.js","../lib/results.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': DEFAULTS.alpha,\n\t\t'ddof': DEFAULTS.ddof,\n\t\t'simulate': DEFAULTS.simulate,\n\t\t'iterations': DEFAULTS.iterations\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {NonNegativeInteger} [options.ddof] - degrees of freedom adjustment\n* @param {boolean} [options.simulate] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations] - number of Monte Carlo iterations\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'simulate': false,\n*     'ddof': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0dO2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( '0dO8h', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( '0dOA1', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ddof' ) ) {\n\t\topts.ddof = options.ddof;\n\t\tif ( !isNonNegativeInteger( opts.ddof ) ) {\n\t\t\treturn new TypeError( format( '0dO35', 'ddof', opts.ddof ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iterations' ) ) {\n\t\topts.iterations = options.iterations;\n\t\tif ( !isPositiveInteger( opts.iterations ) ) {\n\t\t\treturn new TypeError( format( '0dO3b', 'iterations', opts.iterations ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'simulate' ) ) {\n\t\topts.simulate = options.simulate;\n\t\tif ( !isBoolean( opts.simulate ) ) {\n\t\t\treturn new TypeError( format( '0dO30', 'simulate', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\nvar PMF = require( './pmf.js' );\n\n\n// MAIN //\n\n/**\n* Returns the probability mass function (PMF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @returns {(Function|Error)} a probability mass function (PMF) or an error\n*/\nfunction getPMF( name ) {\n\tif ( !hasOwnProp( PMF, name ) ) {\n\t\treturn new Error( format( '0dO9v', name ) );\n\t}\n\treturn PMF[ name ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getPMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bernoulli = require( '@stdlib/stats-base-dists-bernoulli-pmf' );\nvar binomial = require( '@stdlib/stats-base-dists-binomial-pmf' );\nvar discreteUniform = require( '@stdlib/stats-base-dists-discrete-uniform-pmf' );\nvar geometric = require( '@stdlib/stats-base-dists-geometric-pmf' );\nvar hypergeometric = require( '@stdlib/stats-base-dists-hypergeometric-pmf' );\nvar negativeBinomial = require( '@stdlib/stats-base-dists-negative-binomial-pmf' );\nvar poisson = require( '@stdlib/stats-base-dists-poisson-pmf' );\n\n\n// MAIN //\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\nvar PMF = {\n\t'bernoulli': bernoulli,\n\t'binomial': binomial,\n\t'discrete-uniform': discreteUniform,\n\t'geometric': geometric,\n\t'hypergeometric': hypergeometric,\n\t'negative-binomial': negativeBinomial,\n\t'poisson': poisson\n};\n\n\n// EXPORTS //\n\nmodule.exports = PMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Computes a chi-square test statistic.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - observation frequencies\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - expected frequencies\n* @param {integer} strideY - `y` stride length\n* @returns {number} test statistic\n*/\nfunction testStatistic( N, x, strideX, y, strideY ) {\n\tvar stat;\n\tvar v1;\n\tvar v2;\n\tvar d;\n\tvar i;\n\n\tstat = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv1 = x[ i*strideX ];\n\t\tv2 = y[ i*strideY ];\n\t\tif ( v2 === 0.0 ) {\n\t\t\tif ( v1 === 0.0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t\td = v1 - v2;\n\t\tstat += ( d * d ) / v2;\n\t}\n\treturn stat;\n}\n\n\n// EXPORTS //\n\nmodule.exports = testStatistic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a frequency table from an input array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var arr = [ 0, 1, 1, 0, 0, 2, 3, 5 ];\n* var out = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var freq = tabulate( arr.length, arr, 1, out, 1 );\n* // returns [ 3, 2, 1, 1, 0, 1, 0, 0 ]\n*/\nfunction tabulate( N, x, strideX, y, strideY ) {\n\tvar i;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ x[ i*strideX ] * strideY ] += 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = tabulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrspace = require( '@stdlib/array-base-incrspace' );\nvar sample = require( '@stdlib/random-sample' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar dfill = require( '@stdlib/blas-ext-base-dfill' );\nvar tabulate = require( './tabulate.js' );\nvar testStatistic = require( './statistic.js' );\n\n\n// MAIN //\n\n/**\n* Performs a Monte-Carlo simulation.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} expected - expected number of observations\n* @param {NumericArray} p - probabilities\n* @param {number} stat - test statistic\n* @param {NonNegativeInteger} nobs - total number of observations\n* @param {NonNegativeInteger} niter - number of iterations\n* @returns {number} p-value\n*/\nfunction simulate( N, expected, p, stat, nobs, niter ) {\n\tvar pool;\n\tvar opts;\n\tvar freq;\n\tvar cnt;\n\tvar v;\n\tvar i;\n\n\tpool = incrspace( 0, N, 1 ); // TODO: replace with strided interface\n\topts = {\n\t\t'size': nobs,\n\t\t'probs': p\n\t};\n\tfreq = new Float64Array( N );\n\tcnt = 1;\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tv = sample( pool, opts ); // TODO: use `sample.factory` method once sample pkg is updated\n\t\tfreq = tabulate( N, v, 1, freq, 1 );\n\t\tif ( testStatistic( N, freq, 1, expected, 1 ) >= stat ) { // TODO: consider replacing with low-level double-precision strided interface\n\t\t\tcnt += 1;\n\t\t}\n\t\tif ( i < niter-1 ) {\n\t\t\tdfill( N, 0.0, freq, 1 );\n\t\t}\n\t}\n\treturn cnt / ( niter+1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = simulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {(number|null)} df - degrees of freedom\n* @returns {Results} results object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var alpha = res.alpha;\n* // returns 0.05\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {(number|null)}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var df = res.df;\n* // returns 4\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var method = res.method;\n* // returns 'Chi-square goodness-of-fit test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square goodness-of-fit test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var pval = res.pValue;\n* // returns 0.0406\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var stat = res.statistic;\n* // returns 9.9901\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square goodness-of-fit test\n*\n*     Null hypothesis: population probabilities are equal to those in p\n*\n*        pValue: 0.0406\n*        statistic: 9.9901\n*        degrees of freedom: 4\n*\n*     Test Decision: Reject null in favor of alternative at 5% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( '0dO4K', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( '0dO3b', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( '0dO30', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: population probabilities are equal to those in p',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var o = res.toJSON();\n* // returns {'rejected': true, 'alpha': 0.05, 'pValue': 0.0406, 'df': 4, ...}\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nmodule.exports = Results;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar absdiff = require( '@stdlib/math-base-utils-absolute-difference' );\nvar FLOAT64_SQRT_EPS = require( '@stdlib/constants-float64-sqrt-eps' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar format = require( '@stdlib/error-tools-fmtprodmsg' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar daxpy = require( '@stdlib/blas-base-daxpy' );\nvar dscal = require( '@stdlib/blas-base-dscal' );\nvar dsumpw = require( '@stdlib/blas-ext-base-dsumpw' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar getPMF = require( './get_pmf.js' );\nvar testStatistic = require( './statistic.js' );\nvar simulate = require( './simulate.js' );\nvar Results = require( './results.js' );\n\n\n// MAIN //\n\n/**\n* Performs a chi-square goodness-of-fit test.\n*\n* @param {(Collection|VectorLike)} x - observation frequencies\n* @param {(Collection|VectorLike|string)} y - expected frequencies or a discrete probability distribution name\n* @param {...number} [args] - probability mass function (PMF) arguments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment\n* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations\n* @throws {TypeError} first argument must be an array-like object or a 1-dimensional array containing nonnegative integers\n* @throws {TypeError} second argument must be either an array-like object (or a 1-dimensional array) of nonnegative numbers, an array-like object (or a 1-dimensional array) of probabilities summing to one, or a discrete probability distribution name\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} first and second arguments must have the same length\n* @throws {Error} first argument must contain at least one element greater than zero\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @throws {TypeError} probability mass function (PMF) arguments must be numbers\n* @returns {Object} test results\n*\n* @example\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\nfunction chi2gof( x, y ) {\n\tvar expected;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar obs;\n\tvar err;\n\tvar pmf;\n\tvar sum;\n\tvar df;\n\tvar N;\n\tvar d;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar p;\n\tvar v;\n\tvar i;\n\n\tif ( isndarrayLike( x ) && x.ndims === 1 && x.strides.length === 1 ) { // is ndarray-like vector?\n\t\td = x.data;\n\t\ts = x.strides[ 0 ];\n\t\to = x.offset;\n\t} else if ( isCollection( x ) ) {\n\t\td = x;\n\t\ts = 1;\n\t\to = 0;\n\t} else {\n\t\tthrow new TypeError( format( '0dO3f', x ) );\n\t}\n\tN = x.length;\n\n\t// Initialize an array for storing a copy of the observations array:\n\tobs = new Float64Array( N+1 ); // Note: `N+1` is intentional in the event that we need to add a remaining category for all values greater than or equal to `N`\n\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = d[ o+(s*i) ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t}\n\t\tobs[ i ] = v;\n\t\tn += v;\n\t}\n\tif ( n === 0 ) {\n\t\tthrow new Error( format( '0dO1G' ) );\n\t}\n\t// NOTE: `obs` is now a single-segment contiguous Float64Array\n\n\tnargs = 0;\n\tif ( isString( y ) ) {\n\t\tpmf = getPMF( y );\n\t\tif ( pmf instanceof Error ) {\n\t\t\tthrow pmf;\n\t\t}\n\t\tnargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity\n\t\targs = [ 0 ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i+2 ];\n\t\t\tif ( !isNumber( v ) || isnan( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Probability mass function (PMF) arguments must be numbers. Argument: `%f`. Value: `%s`.', i+2, v ) );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\texpected = new Float64Array( N+1 );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\targs[ 0 ] = i;\n\t\t\tif ( y === 'discrete-uniform' ) {\n\t\t\t\targs[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)\n\t\t\t}\n\t\t\tv = pmf.apply( null, args );\n\t\t\tsum += v;\n\t\t\texpected[ i ] = v * n;\n\t\t}\n\t\t// Check whether we need to add a remaining category for all values greater than or equal to `N`...\n\t\tif ( sum < 1.0 ) {\n\t\t\texpected[ N ] = (1.0-sum) * n;\n\t\t\tN += 1;\n\t\t}\n\t} else {\n\t\tif ( isndarrayLike( y ) && y.ndims === 1 && y.strides.length === 1 ) { // is ndarray-like vector?\n\t\t\td = y.data;\n\t\t\ts = y.strides[ 0 ];\n\t\t\to = y.offset;\n\t\t} else if ( isCollection( y ) ) {\n\t\t\td = y;\n\t\t\ts = 1;\n\t\t\to = 0;\n\t\t} else {\n\t\t\tthrow new TypeError( format( '0dO9y', y ) );\n\t\t}\n\t\tif ( y.length !== N ) {\n\t\t\tthrow new Error( format( '0dO1H' ) );\n\t\t}\n\t\texpected = new Float64Array( N );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = d[ o+(s*i) ];\n\t\t\tif ( !isNumber( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain numbers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t\t}\n\t\t\tif ( v < 0.0 ) {\n\t\t\t\tthrow new TypeError( format( '0dOA0', i, v ) );\n\t\t\t} else if ( v > 1.0 ) {\n\t\t\t\tsum += PINF;\n\t\t\t} else {\n\t\t\t\tsum += v;\n\t\t\t}\n\t\t\texpected[ i ] = v;\n\t\t}\n\t\t// Check if provided a unity probability array (otherwise, assume provided an expected frequencies array)...\n\t\tif ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS ) {\n\t\t\tp = y; // NOTE: `y` may not be a Float64Array\n\t\t\texpected = dscal( N, n, expected, 1 );\n\t\t}\n\t}\n\t// NOTE: `expected` is now a single-segment contiguous Float64Array\n\n\topts = defaults();\n\tif ( arguments.length > 2+nargs ) {\n\t\terr = validate( opts, arguments[ 2+nargs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstat = testStatistic( N, obs, 1, expected, 1 ); // TODO: consider replacing with low-level double-precision strided interface\n\tif ( opts.simulate ) {\n\t\tif ( p === void 0 ) {\n\t\t\tv = dsumpw( N, expected, 1 );\n\t\t\tp = daxpy( N, 1.0/v, expected, 1, new Float64Array( N ), 1 );\n\t\t}\n\t\tpval = simulate( N, expected, p, stat, n, opts.iterations );\n\t} else {\n\t\tdf = N - 1 - opts.ddof;\n\t\tpval = 1.0 - chisqCDF( stat, df );\n\t}\n\treturn new Results( pval, opts.alpha, stat, ( df === void 0 ) ? null : df );\n}\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square goodness-of-fit test.\n*\n* @module @stdlib/stats-chi2gof\n*\n* @example\n* var chi2gof = require( '@stdlib/stats-chi2gof' );\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*\n* var table = out.toString();\n* /*\n* Null hypothesis: population probabilities are equal to those in p\n*\n*     pValue: 0.0406\n*     statistic: 9.9901\n*     degrees of freedom: 4\n*\n* Test Decision: Reject null in favor of alternative at 5% significance level\n* /*\n*/\n\n// MODULES //\n\nvar chi2gof = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n"],"names":["DEFAULTS","defaults_1","alpha","ddof","simulate","iterations","isNonNegativeInteger","require$$0","isPrimitive","isPositiveInteger","require$$1","isBoolean","require$$2","isNumber","require$$3","isObject","require$$4","isnan","require$$5","hasOwnProp","require$$6","format","require$$7","validate_1","opts","options","TypeError","RangeError","PMF","bernoulli","binomial","geometric","hypergeometric","poisson","get_pmf","name","Error","PINF","statistic","N","x","strideX","y","strideY","stat","v1","v2","d","i","incrspace","sample","Float64Array","dfill","tabulate","testStatistic","simulate_1","expected","p","nobs","niter","pool","freq","cnt","v","size","probs","roundn","setReadOnly","setReadOnlyAccessor","Results","pValue","df","this","_pValue","_alpha","_statistic","_df","prototype","decision","dgts","out","arguments","length","digits","method","push","join","rejected","results","isCollection","isndarrayLike","isString","absdiff","FLOAT64_SQRT_EPS","chisqCDF","require$$8","require$$9","require$$10","daxpy","require$$11","dscal","require$$12","dsumpw","require$$13","require$$14","defaults","require$$15","validate","require$$16","getPMF","require$$17","require$$18","require$$19","require$$20","main","nargs","args","pval","obs","err","pmf","sum","s","o","n","ndims","strides","data","offset","apply","lib"],"mappings":"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"}