{
  "version": 3,
  "sources": ["../lib/defaults.json", "../lib/defaults.js", "../lib/validate.js", "../lib/pmf.js", "../lib/get_pmf.js", "../lib/statistic.js", "../lib/tabulate.js", "../lib/simulate.js", "../lib/results.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"alpha\": 0.05,\n\t\"ddof\": 0,\n\t\"simulate\": false,\n\t\"iterations\": 500\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': DEFAULTS.alpha,\n\t\t'ddof': DEFAULTS.ddof,\n\t\t'simulate': DEFAULTS.simulate,\n\t\t'iterations': DEFAULTS.iterations\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {NonNegativeInteger} [options.ddof] - degrees of freedom adjustment\n* @param {boolean} [options.simulate] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations] - number of Monte Carlo iterations\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'simulate': false,\n*     'ddof': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval: [0, 1]. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ddof' ) ) {\n\t\topts.ddof = options.ddof;\n\t\tif ( !isNonNegativeInteger( opts.ddof ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'ddof', opts.ddof ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iterations' ) ) {\n\t\topts.iterations = options.iterations;\n\t\tif ( !isPositiveInteger( opts.iterations ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'iterations', opts.iterations ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'simulate' ) ) {\n\t\topts.simulate = options.simulate;\n\t\tif ( !isBoolean( opts.simulate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'simulate', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bernoulli = require( '@stdlib/stats-base-dists-bernoulli-pmf' );\nvar binomial = require( '@stdlib/stats-base-dists-binomial-pmf' );\nvar discreteUniform = require( '@stdlib/stats-base-dists-discrete-uniform-pmf' );\nvar geometric = require( '@stdlib/stats-base-dists-geometric-pmf' );\nvar hypergeometric = require( '@stdlib/stats-base-dists-hypergeometric-pmf' );\nvar negativeBinomial = require( '@stdlib/stats-base-dists-negative-binomial-pmf' );\nvar poisson = require( '@stdlib/stats-base-dists-poisson-pmf' );\n\n\n// MAIN //\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\nvar PMF = {\n\t'bernoulli': bernoulli,\n\t'binomial': binomial,\n\t'discrete-uniform': discreteUniform,\n\t'geometric': geometric,\n\t'hypergeometric': hypergeometric,\n\t'negative-binomial': negativeBinomial,\n\t'poisson': poisson\n};\n\n\n// EXPORTS //\n\nmodule.exports = PMF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar format = require( '@stdlib/string-format' );\nvar PMF = require( './pmf.js' );\n\n\n// MAIN //\n\n/**\n* Returns the probability mass function (PMF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @returns {(Function|Error)} a probability mass function (PMF) or an error\n*/\nfunction getPMF( name ) {\n\tif ( !hasOwnProp( PMF, name ) ) {\n\t\treturn new Error( format( 'invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.', name ) );\n\t}\n\treturn PMF[ name ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getPMF;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants-float64-pinf' );\n\n\n// MAIN //\n\n/**\n* Computes a chi-square test statistic.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - observation frequencies\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - expected frequencies\n* @param {integer} strideY - `y` stride length\n* @returns {number} test statistic\n*/\nfunction testStatistic( N, x, strideX, y, strideY ) {\n\tvar stat;\n\tvar v1;\n\tvar v2;\n\tvar d;\n\tvar i;\n\n\tstat = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv1 = x[ i*strideX ];\n\t\tv2 = y[ i*strideY ];\n\t\tif ( v2 === 0.0 ) {\n\t\t\tif ( v1 === 0.0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t\td = v1 - v2;\n\t\tstat += ( d * d ) / v2;\n\t}\n\treturn stat;\n}\n\n\n// EXPORTS //\n\nmodule.exports = testStatistic;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a frequency table from an input array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var arr = [ 0, 1, 1, 0, 0, 2, 3, 5 ];\n* var out = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var freq = tabulate( arr.length, arr, 1, out, 1 );\n* // returns [ 3, 2, 1, 1, 0, 1, 0, 0 ]\n*/\nfunction tabulate( N, x, strideX, y, strideY ) {\n\tvar i;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ x[ i*strideX ] * strideY ] += 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = tabulate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrspace = require( '@stdlib/array-base-incrspace' );\nvar sample = require( '@stdlib/random-sample' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar dfill = require( '@stdlib/blas-ext-base-dfill' );\nvar tabulate = require( './tabulate.js' );\nvar testStatistic = require( './statistic.js' );\n\n\n// MAIN //\n\n/**\n* Performs a Monte-Carlo simulation.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} expected - expected number of observations\n* @param {NumericArray} p - probabilities\n* @param {number} stat - test statistic\n* @param {NonNegativeInteger} nobs - total number of observations\n* @param {NonNegativeInteger} niter - number of iterations\n* @returns {number} p-value\n*/\nfunction simulate( N, expected, p, stat, nobs, niter ) {\n\tvar pool;\n\tvar opts;\n\tvar freq;\n\tvar cnt;\n\tvar v;\n\tvar i;\n\n\tpool = incrspace( 0, N, 1 ); // TODO: replace with strided interface\n\topts = {\n\t\t'size': nobs,\n\t\t'probs': p\n\t};\n\tfreq = new Float64Array( N );\n\tcnt = 1;\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tv = sample( pool, opts ); // TODO: use `sample.factory` method once sample pkg is updated\n\t\tfreq = tabulate( N, v, 1, freq, 1 );\n\t\tif ( testStatistic( N, freq, 1, expected, 1 ) >= stat ) { // TODO: consider replacing with low-level double-precision strided interface\n\t\t\tcnt += 1;\n\t\t}\n\t\tif ( i < niter-1 ) {\n\t\t\tdfill( N, 0.0, freq, 1 );\n\t\t}\n\t}\n\treturn cnt / ( niter+1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = simulate;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert-is-positive-integer' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar roundn = require( '@stdlib/math-base-special-roundn' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {(number|null)} df - degrees of freedom\n* @returns {Results} results object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var alpha = res.alpha;\n* // returns 0.05\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {(number|null)}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var df = res.df;\n* // returns 4\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var method = res.method;\n* // returns 'Chi-square goodness-of-fit test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square goodness-of-fit test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var pval = res.pValue;\n* // returns 0.0406\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var stat = res.statistic;\n* // returns 9.9901\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square goodness-of-fit test\n*\n*     Null hypothesis: population probabilities are equal to those in p\n*\n*        pValue: 0.0406\n*        statistic: 9.9901\n*        degrees of freedom: 4\n*\n*     Test Decision: Reject null in favor of alternative at 5% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: population probabilities are equal to those in p',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var o = res.toJSON();\n* // returns { 'rejected': true, 'alpha': 0.05, 'pValue': 0.0406, 'df': 4, ... }\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nmodule.exports = Results;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar absdiff = require( '@stdlib/math-base-utils-absolute-difference' );\nvar FLOAT64_SQRT_EPS = require( '@stdlib/constants-float64-sqrt-eps' );\nvar PINF = require( '@stdlib/constants-float64-pinf' );\nvar chisqCDF = require( '@stdlib/stats-base-dists-chisquare-cdf' );\nvar format = require( '@stdlib/string-format' );\nvar isnan = require( '@stdlib/assert-is-nan' );\nvar daxpy = require( '@stdlib/blas-base-daxpy' );\nvar dscal = require( '@stdlib/blas-base-dscal' );\nvar dsumpw = require( '@stdlib/blas-ext-base-dsumpw' );\nvar Float64Array = require( '@stdlib/array-float64' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar getPMF = require( './get_pmf.js' );\nvar testStatistic = require( './statistic.js' );\nvar simulate = require( './simulate.js' );\nvar Results = require( './results.js' );\n\n\n// MAIN //\n\n/**\n* Performs a chi-square goodness-of-fit test.\n*\n* @param {(Collection|VectorLike)} x - observation frequencies\n* @param {(Collection|VectorLike|string)} y - expected frequencies or a discrete probability distribution name\n* @param {...number} [args] - probability mass function (PMF) arguments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment\n* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations\n* @throws {TypeError} first argument must be an array-like object or a 1-dimensional array containing nonnegative integers\n* @throws {TypeError} second argument must be either an array-like object (or a 1-dimensional array) of nonnegative numbers, an array-like object (or a 1-dimensional array) of probabilities summing to one, or a discrete probability distribution name\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} first and second arguments must have the same length\n* @throws {Error} first argument must contain at least one element greater than zero\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @throws {TypeError} probability mass function (PMF) arguments must be numbers\n* @returns {Object} test results\n*\n* @example\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\nfunction chi2gof( x, y ) {\n\tvar expected;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar obs;\n\tvar err;\n\tvar pmf;\n\tvar sum;\n\tvar df;\n\tvar N;\n\tvar d;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar p;\n\tvar v;\n\tvar i;\n\n\tif ( isndarrayLike( x ) && x.ndims === 1 && x.strides.length === 1 ) { // is ndarray-like vector?\n\t\td = x.data;\n\t\ts = x.strides[ 0 ];\n\t\to = x.offset;\n\t} else if ( isCollection( x ) ) {\n\t\td = x;\n\t\ts = 1;\n\t\to = 0;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a one-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tN = x.length;\n\n\t// Initialize an array for storing a copy of the observations array:\n\tobs = new Float64Array( N+1 ); // Note: `N+1` is intentional in the event that we need to add a remaining category for all values greater than or equal to `N`\n\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = d[ o+(s*i) ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t}\n\t\tobs[ i ] = v;\n\t\tn += v;\n\t}\n\tif ( n === 0 ) {\n\t\tthrow new Error( 'invalid argument. First argument must contain at least one element greater than zero (i.e., the total number number of observations must be greater than zero).' );\n\t}\n\t// NOTE: `obs` is now a single-segment contiguous Float64Array\n\n\tnargs = 0;\n\tif ( isString( y ) ) {\n\t\tpmf = getPMF( y );\n\t\tif ( pmf instanceof Error ) {\n\t\t\tthrow pmf;\n\t\t}\n\t\tnargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity\n\t\targs = [ 0 ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i+2 ];\n\t\t\tif ( !isNumber( v ) || isnan( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Probability mass function (PMF) arguments must be numbers. Argument: `%u`. Value: `%s`.', i+2, v ) );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\texpected = new Float64Array( N+1 );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\targs[ 0 ] = i;\n\t\t\tif ( y === 'discrete-uniform' ) {\n\t\t\t\targs[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)\n\t\t\t}\n\t\t\tv = pmf.apply( null, args );\n\t\t\tsum += v;\n\t\t\texpected[ i ] = v * n;\n\t\t}\n\t\t// Check whether we need to add a remaining category for all values greater than or equal to `N`...\n\t\tif ( sum < 1.0 ) {\n\t\t\texpected[ N ] = (1.0-sum) * n;\n\t\t\tN += 1;\n\t\t}\n\t} else {\n\t\tif ( isndarrayLike( y ) && y.ndims === 1 && y.strides.length === 1 ) { // is ndarray-like vector?\n\t\t\td = y.data;\n\t\t\ts = y.strides[ 0 ];\n\t\t\to = y.offset;\n\t\t} else if ( isCollection( y ) ) {\n\t\t\td = y;\n\t\t\ts = 1;\n\t\t\to = 0;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object (or one-dimensional ndarray) of probabilities summing to one, an array-like object (or one-dimensional ndarray) of expected frequencies, or a discrete probability distribution name. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( y.length !== N ) {\n\t\t\tthrow new RangeError( 'invalid arguments. First and second arguments must have the same length.' );\n\t\t}\n\t\texpected = new Float64Array( N );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = d[ o+(s*i) ];\n\t\t\tif ( !isNumber( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain numbers. Index: `%u`. Value: `%s`.', i, v ) );\n\t\t\t}\n\t\t\tif ( v < 0.0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain nonnegative numbers. Index: `%u`. Value: `%d`.', i, v ) );\n\t\t\t} else if ( v > 1.0 ) {\n\t\t\t\tsum += PINF;\n\t\t\t} else {\n\t\t\t\tsum += v;\n\t\t\t}\n\t\t\texpected[ i ] = v;\n\t\t}\n\t\t// Check if provided a unity probability array (otherwise, assume provided an expected frequencies array)...\n\t\tif ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS ) {\n\t\t\tp = y; // NOTE: `y` may not be a Float64Array\n\t\t\texpected = dscal( N, n, expected, 1 );\n\t\t}\n\t}\n\t// NOTE: `expected` is now a single-segment contiguous Float64Array\n\n\topts = defaults();\n\tif ( arguments.length > 2+nargs ) {\n\t\terr = validate( opts, arguments[ 2+nargs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstat = testStatistic( N, obs, 1, expected, 1 ); // TODO: consider replacing with low-level double-precision strided interface\n\tif ( opts.simulate ) {\n\t\tif ( p === void 0 ) {\n\t\t\tv = dsumpw( N, expected, 1 );\n\t\t\tp = daxpy( N, 1.0/v, expected, 1, new Float64Array( N ), 1 );\n\t\t}\n\t\tpval = simulate( N, expected, p, stat, n, opts.iterations );\n\t} else {\n\t\tdf = N - 1 - opts.ddof;\n\t\tpval = 1.0 - chisqCDF( stat, df );\n\t}\n\treturn new Results( pval, opts.alpha, stat, ( df === void 0 ) ? null : df );\n}\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square goodness-of-fit test.\n*\n* @module @stdlib/stats-chi2gof\n*\n* @example\n* var chi2gof = require( '@stdlib/stats-chi2gof' );\n*\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\n\n// MODULES //\n\nvar chi2gof = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n"],
  "mappings": "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",
  "names": ["require_defaults", "__commonJSMin", "exports", "module", "require_defaults", "__commonJSMin", "exports", "module", "DEFAULTS", "defaults", "require_validate", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isPositiveInteger", "isBoolean", "isNumber", "isObject", "isnan", "hasOwnProp", "format", "validate", "opts", "options", "require_pmf", "__commonJSMin", "exports", "module", "bernoulli", "binomial", "discreteUniform", "geometric", "hypergeometric", "negativeBinomial", "poisson", "PMF", "require_get_pmf", "__commonJSMin", "exports", "module", "hasOwnProp", "format", "PMF", "getPMF", "name", "require_statistic", "__commonJSMin", "exports", "module", "PINF", "testStatistic", "N", "x", "strideX", "y", "strideY", "stat", "v1", "v2", "d", "i", "require_tabulate", "__commonJSMin", "exports", "module", "tabulate", "N", "x", "strideX", "y", "strideY", "i", "require_simulate", "__commonJSMin", "exports", "module", "incrspace", "sample", "Float64Array", "dfill", "tabulate", "testStatistic", "simulate", "N", "expected", "p", "stat", "nobs", "niter", "pool", "opts", "freq", "cnt", "v", "i", "require_results", "__commonJSMin", "exports", "module", "isPositiveInteger", "isObject", "isBoolean", "hasOwnProp", "roundn", "setReadOnly", "setReadOnlyAccessor", "format", "Results", "pValue", "alpha", "statistic", "df", "opts", "decision", "dgts", "out", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "isCollection", "isndarrayLike", "isNumber", "isString", "absdiff", "FLOAT64_SQRT_EPS", "PINF", "chisqCDF", "format", "isnan", "daxpy", "dscal", "dsumpw", "Float64Array", "defaults", "validate", "getPMF", "testStatistic", "simulate", "Results", "chi2gof", "x", "y", "expected", "nargs", "args", "opts", "pval", "stat", "obs", "err", "pmf", "sum", "df", "N", "d", "s", "o", "n", "p", "v", "i", "chi2gof"]
}
